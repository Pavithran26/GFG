import java.util.*;

class Solution {
    public int countPaths(int[][] edges, int V, int src, int dest) {
        // Create an adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        // Populate the adjacency list with directed edges
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
        }
        
        // Initialize memoization array
        int[] memo = new int[V];
        Arrays.fill(memo, -1);
        
        return dfs(adj, src, dest, memo);
    }
    
    private int dfs(List<List<Integer>> adj, int current, int dest, int[] memo) {
        if (current == dest) {
            return 1;
        }
        
        if (memo[current] != -1) {
            return memo[current];
        }
        
        int count = 0;
        for (int neighbor : adj.get(current)) {
            count += dfs(adj, neighbor, dest, memo);
        }
        
        memo[current] = count;
        return count;
    }
}