import java.io.*;
import java.util.*;
class Node {
    Node next;
    int val;
    public Node(int data) {
        val = data;
        next = null;
    }
}
class Main {
    public static void main(String args[]) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);
        int t;
        t = Integer.parseInt(in.readLine());
        while (t-- > 0) {
            Node head, tail;
            String s[] = in.readLine().trim().split(" ");
            int num = Integer.parseInt(s[0]);
            head = new Node(num);
            tail = head;
            for (int i = 1; i < s.length; i++) {
                num = Integer.parseInt(s[i]);
                tail.next = new Node(num);
                tail = tail.next;
            }
            Solution ob = new Solution();
            Node temp = ob.primeList(head);
            while (temp != null) {
                out.print(temp.val + " ");
                temp = temp.next;
            }
            out.println();
            out.println("~");
        }
        out.close();
    }
}
class Solution {
    Node primeList(Node head) {
        if (head == null) return null;
        int maxVal = 0;
        Node current = head;
        while (current != null) {
            if (current.val > maxVal) {
                maxVal = current.val;
            }
            current = current.next;
        }
        int sieveSize = maxVal + 100; // buffer to handle cases where primes above are needed
        boolean[] isPrime = sieveOfEratosthenes(sieveSize);
        current = head;
        while (current != null) {
            int num = current.val;
            if (num == 1) {
                current.val = 2;
            } else if (!isPrime[num]) {
                int lowerPrime = findLowerPrime(num, isPrime);
                int higherPrime = findHigherPrime(num, isPrime);
                
                if (num - lowerPrime <= higherPrime - num) {
                    current.val = lowerPrime;
                } else {
                    current.val = higherPrime;
                }
            }
            current = current.next;
        }
        
        return head;
    }
    
    private boolean[] sieveOfEratosthenes(int n) {
        boolean[] isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;
        
        for (int i = 2; i * i <= n; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= n; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        return isPrime;
    }
    
    private int findLowerPrime(int num, boolean[] isPrime) {
        for (int i = num - 1; i >= 2; i--) {
            if (isPrime[i]) {
                return i;
            }
        }
        return 2;
    }
    
    private int findHigherPrime(int num, boolean[] isPrime) {
        for (int i = num + 1; i < isPrime.length; i++) {
            if (isPrime[i]) {
                return i;
            }
        }
        int i = num + 1;
        while (true) {
            if (isPrime(i)) {
                return i;
            }
            i++;
        }
    }
    private boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
    }
}