//Farthest Smaller Right
import java.util.ArrayList;
import java.util.Stack;

class Solution {
    public ArrayList<Integer> farMin(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>(n);
        
        // Initialize with -1
        for (int i = 0; i < n; i++) res.add(-1);

        Stack<Integer> stack = new Stack<>();
        
        // Traverse from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Remove indices which don't satisfy the "smaller than arr[i]"
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            // If stack is not empty, stack.peek() is the farthest to the right with smaller value
            if (!stack.isEmpty()) {
                res.set(i, stack.peek());
            }
            // Push current index for use as a candidate for earlier indices
            stack.push(i);
        }
        
        return res;
    }
}
