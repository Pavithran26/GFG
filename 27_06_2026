class Solution {
    public int getCount(int n) {
        if (n == 1) return 10;
        
        // Define the adjacency list for each digit
        int[][] adj = {
            {0, 8},          // 0
            {1, 2, 4},       // 1
            {2, 1, 3, 5},    // 2
            {3, 2, 6},       // 3
            {4, 1, 5, 7},   // 4
            {5, 2, 4, 6, 8},// 5
            {6, 3, 5, 9},   // 6
            {7, 4, 8},      // 7
            {8, 5, 7, 9, 0}, // 8
            {9, 6, 8}        // 9
        };
        
        // DP table: dp[i][j] represents the count of numbers of length i ending with digit j
        int[][] dp = new int[n + 1][10];
        
        // Base case: for length 1, each digit has 1 sequence
        for (int j = 0; j < 10; j++) {
            dp[1][j] = 1;
        }
        
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 10; j++) {
                dp[i][j] = 0;
                // Iterate over all adjacent digits of j
                int[] neighbors;
                if (j == 0) neighbors = new int[]{0, 8};
                else if (j == 1) neighbors = new int[]{1, 2, 4};
                else if (j == 2) neighbors = new int[]{2, 1, 3, 5};
                else if (j == 3) neighbors = new int[]{3, 2, 6};
                else if (j == 4) neighbors = new int[]{4, 1, 5, 7};
                else if (j == 5) neighbors = new int[]{5, 2, 4, 6, 8};
                else if (j == 6) neighbors = new int[]{6, 3, 5, 9};
                else if (j == 7) neighbors = new int[]{7, 4, 8};
                else if (j == 8) neighbors = new int[]{8, 5, 7, 9, 0};
                else if (j == 9) neighbors = new int[]{9, 6, 8};
                else neighbors = new int[0];
                
                for (int k : neighbors) {
                    dp[i][j] += dp[i - 1][k];
                }
            }
        }
        
        int total = 0;
        for (int j = 0; j < 10; j++) {
            total += dp[n][j];
        }
        return total;
    }
}