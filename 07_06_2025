import java.util.HashMap;

class Solution {
    public int longestCommonSum(int[] a1, int[] a2) {
        int n = a1.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = a1[i] - a2[i];
        }
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int prefixSum = 0;
        int maxLen = 0;
        map.put(0, -1); // Initialize with prefix sum 0 at index -1
        
        for (int i = 0; i < n; i++) {
            prefixSum += diff[i];
            if (map.containsKey(prefixSum)) {
                int prevIndex = map.get(prefixSum);
                maxLen = Math.max(maxLen, i - prevIndex);
            } else {
                map.put(prefixSum, i);
            }
        }
        
        return maxLen;
    }
}