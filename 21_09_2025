//MAX rectangle
class Solution {
    static int maxArea(int mat[][]) {
        int n = mat.length;
        int m = mat[0].length;
        int maxArea = 0;
        int[] heights = new int[m];
        for (int i = 0; i < n; i++) {
            // Update histogram heights
            for (int j = 0; j < m; j++)
                heights[j] = (mat[i][j] == 0) ? 0 : heights[j] + 1;
            // Calculate max area in histogram for this row
            maxArea = Math.max(maxArea, largestRectangleArea(heights));
        }
        return maxArea;
    }

    static int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int maxArea = 0;
        java.util.Stack<Integer> stack = new java.util.Stack<>();
        int i = 0;
        while (i < n) {
            if (stack.isEmpty() || heights[i] >= heights[stack.peek()]) {
                stack.push(i++);
            } else {
                int tp = stack.pop();
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, heights[tp] * width);
            }
        }
        while (!stack.isEmpty()) {
            int tp = stack.pop();
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            maxArea = Math.max(maxArea, heights[tp] * width);
        }
        return maxArea;
    }
}
