from collections import deque

class Solution:
    def minTime(self, root, target):
        if not root:
            return 0
        
        # Step 1: Create a map to store parent pointers
        parent_map = {}
        target_node = None
        q = deque([root])
        
        # BFS to set parent pointers and find the target node
        while q:
            node = q.popleft()
            if node.data == target:
                target_node = node
            if node.left:
                parent_map[node.left] = node
                q.append(node.left)
            if node.right:
                parent_map[node.right] = node
                q.append(node.right)
        
        if not target_node:
            return 0
        
        q = deque()
        q.append((target_node, 0))
        visited = set()
        visited.add(target_node)
        max_time = 0
        
        while q:
            node, time = q.popleft()
            max_time = max(max_time, time)
            
            # Check parent
            if node in parent_map and parent_map[node] not in visited:
                visited.add(parent_map[node])
                q.append((parent_map[node], time + 1))
            
            # Check left child
            if hasattr(node, 'left') and node.left and node.left not in visited:
                visited.add(node.left)
                q.append((node.left, time + 1))
            
            # Check right child
            if hasattr(node, 'right') and node.right and node.right not in visited:
                visited.add(node.right)
                q.append((node.right, time + 1))
        
        return max_time