class Solution {
    public int maxGold(int[][] mat) {
        if (mat == null || mat.length == 0 || mat[0].length == 0) {
            return 0;
        }
        
        int m = mat.length;
        int n = mat[0].length;
        
        int[][] dp = new int[m][n];
        
        for (int j = n - 1; j >= 0; j--) {
            for (int i = 0; i < m; i++) {
                int right = (j == n - 1) ? 0 : dp[i][j + 1];
                int rightUp = (i == 0 || j == n - 1) ? 0 : dp[i - 1][j + 1];
                int rightDown = (i == m - 1 || j == n - 1) ? 0 : dp[i + 1][j + 1];
                
                dp[i][j] = mat[i][j] + Math.max(right, Math.max(rightUp, rightDown));
            }
        }
        
        int maxGold = 0;
        for (int i = 0; i < m; i++) {
            if (dp[i][0] > maxGold) {
                maxGold = dp[i][0];
            }
        }
        
        return maxGold;
    }
}