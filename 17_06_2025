import java.util.Arrays;

class Solution {
    public int minimumCoins(int[] arr, int k) {
        Arrays.sort(arr);
        int n = arr.length;

        // Prefix sum for total coins
        long[] prefixSum = new long[n];
        prefixSum[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + arr[i];
        }

        int minCoins = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            int base = arr[i];
            int upper = base + k;

            // Binary search for first index > base + k
            int l = i, r = n - 1, highIdx = n;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (arr[mid] > upper) {
                    highIdx = mid;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }

            // Coins to remove from piles before index i (remove entire piles)
            long removeLow = (i > 0) ? prefixSum[i - 1] : 0;

            // Coins to remove from high piles (> base + k)
            long removeHigh = 0;
            if (highIdx < n) {
                removeHigh = prefixSum[n - 1] - prefixSum[highIdx - 1] - (long)(n - highIdx) * (base + k);
            }

            minCoins = (int)Math.min(minCoins, removeLow + removeHigh);
        }

        return minCoins;
    }
}
