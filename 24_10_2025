//Split Array Subsequences
class Solution {
    public boolean isPossible(int[] arr, int k) {
        // Count frequency of each number
        Map<Integer, Integer> count = new HashMap<>();
        for (int num : arr) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        
        // Track sequences that need particular numbers
        Map<Integer, Integer> need = new HashMap<>();
        
        for (int num : arr) {
            if (count.get(num) == 0) continue;
            
            // If this number is needed by some existing sequence
            if (need.getOrDefault(num, 0) > 0) {
                count.put(num, count.get(num) - 1);
                need.put(num, need.get(num) - 1);
                need.put(num + 1, need.getOrDefault(num + 1, 0) + 1);
            }
            // Otherwise, try to start a new sequence of at least length k
            else if (count.get(num) > 0) {
                // Check if we can form a sequence of length k starting from num
                for (int i = 0; i < k; i++) {
                    if (count.getOrDefault(num + i, 0) == 0) {
                        return false;
                    }
                    count.put(num + i, count.get(num + i) - 1);
                }
                // After creating sequence [num, num+1, ..., num+k-1],
                // we might need num+k for someone who wants to extend this sequence
                need.put(num + k, need.getOrDefault(num + k, 0) + 1);
            }
        }
        
        return true;
    }
}