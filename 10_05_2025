
import java.io.*;
import java.util.*;
import java.util.HashMap;

class Solution {
    static int longestSubarray(int[] arr, int k) {
        int n = arr.length;
        int[] transformed = new int[n];
        for (int i = 0; i < n; i++) {
            if (arr[i] > k) {
                transformed[i] = 1;
            } else {
                transformed[i] = -1;
            }
        }
        
        HashMap<Integer, Integer> prefixSumIndices = new HashMap<>();
        int prefixSum = 0;
        int maxLength = 0;
        
        for (int i = 0; i < n; i++) {
            prefixSum += transformed[i];
            
            if (prefixSum > 0) {
                maxLength = i + 1;
            } else {
                if (prefixSumIndices.containsKey(prefixSum - 1)) {
                    int prevIndex = prefixSumIndices.get(prefixSum - 1);
                    maxLength = Math.max(maxLength, i - prevIndex);
                }
            }
            
            if (!prefixSumIndices.containsKey(prefixSum)) {
                prefixSumIndices.put(prefixSum, i);
            }
        }
        
        return maxLength;
    }
}


//{ Driver Code Starts.

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            String line = br.readLine();
            String[] tokens = line.split(" ");
            int n = tokens.length;
            int[] arr = new int[n];

            int i = 0;
            // Parse the tokens into integers and add to the array
            for (String token : tokens) {
                arr[i] = Integer.parseInt(token);
                i++;
            }

            int k = Integer.parseInt(br.readLine().trim());
            System.out.println(new Solution().longestSubarray(arr, k));
            System.out.println("~");
        }
    }
}

// } Driver Code Ends