import java.util.ArrayList;

class Solution {
    ArrayList<Integer> search(String pattern, String text) {
        ArrayList<Integer> result = new ArrayList<>();
        int d = 256; // Number of characters in the input alphabet
        int q = 101; // A prime number for hash calculation
        int M = pattern.length();
        int N = text.length();
        
        if (M > N) {
            return result;
        }
        
        int p = 0; // Hash value for pattern
        int t = 0; // Hash value for current window of text
        int h = 1;
        
        // The value of h would be "pow(d, M-1) % q"
        for (int i = 0; i < M - 1; i++) {
            h = (h * d) % q;
        }
        
        // Calculate the hash value of pattern and first window of text
        for (int i = 0; i < M; i++) {
            p = (d * p + pattern.charAt(i)) % q;
            t = (d * t + text.charAt(i)) % q;
        }
        
        // Slide the pattern over text one by one
        for (int i = 0; i <= N - M; i++) {
            // Check the hash values of current window of text and pattern
            if (p == t) {
                // Check for characters one by one
                boolean match = true;
                for (int j = 0; j < M; j++) {
                    if (text.charAt(i + j) != pattern.charAt(j)) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    result.add(i + 1); // 1-based indexing
                }
            }
            
            // Calculate hash value for next window of text
            if (i < N - M) {
                t = (d * (t - text.charAt(i) * h) + text.charAt(i + M)) % q;
                if (t < 0) {
                    t += q;
                }
            }
        }
        
        return result;
    }
}