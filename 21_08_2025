//Maximize the minimum difference between k elements
import java.util.Arrays;

class Solution {
    // Function to check if k elements can be chosen with at least `diff` minimum gap
    private boolean canPlace(int[] arr, int k, int diff) {
        int count = 1; // Pick first element
        int lastPlaced = arr[0];
        
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] - lastPlaced >= diff) {
                count++;
                lastPlaced = arr[i];
                if (count == k) return true;
            }
        }
        return false;
    }

    public int maxMinDiff(int[] arr, int k) {
        Arrays.sort(arr);

        int low = 0;
        int high = arr[arr.length - 1] - arr[0];  // corrected this line
        int result = 0;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            if (canPlace(arr, k, mid)) {
                result = mid;  // mid is possible, try for a bigger difference
                low = mid + 1;
            } else {
                high = mid - 1; // mid not possible, try smaller difference
            }
        }
        
        return result;
    }
}
