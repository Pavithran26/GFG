#Maximum Non-Overlapping Odd Palindrome Sum
class Solution:
    def maxSum(self, s: str) -> int:
        n = len(s)
        # Manacher's algorithm to find all odd-length palindromes
        d = [0] * n
        l, r = 0, -1

        for i in range(n):
            k = 1 if i > r else min(d[l + r - i], r - i + 1)
            while i - k >= 0 and i + k < n and s[i - k] == s[i + k]:
                k += 1
            d[i] = k
            if i + k - 1 > r:
                l = i - k + 1
                r = i + k - 1

        # Create arrays to hold max odd-length palindromes
        max_ending_at = [0] * n
        max_starting_at = [0] * n

        for i in range(n):
            radius = d[i]
            length = 2 * radius - 1
            start = i - radius + 1
            end = i + radius - 1
            if 0 <= end < n:
                max_ending_at[end] = max(max_ending_at[end], length)
            if 0 <= start < n:
                max_starting_at[start] = max(max_starting_at[start], length)

        # Build prefix max: longest palindrome ending at or before i
        prefix = [0] * n
        prefix[0] = max_ending_at[0]
        for i in range(1, n):
            prefix[i] = max(prefix[i - 1], max_ending_at[i])

        # Build suffix max: longest palindrome starting at or after i
        suffix = [0] * n
        suffix[n - 1] = max_starting_at[n - 1]
        for i in range(n - 2, -1, -1):
            suffix[i] = max(suffix[i + 1], max_starting_at[i])

        # Try all split points
        max_sum = 0
        for i in range(n - 1):
            max_sum = max(max_sum, prefix[i] + suffix[i + 1])

        return max_sum
